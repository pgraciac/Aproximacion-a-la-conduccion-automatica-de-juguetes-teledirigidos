import gpio
import vision
import matplotlib.pyplot as plt
import numpy as np
import math

# def average_orientation(path, start_index, num_points, log = False):
#   total_orientation = 0
#   for i in range(start_index, start_index + num_points):
#     if i + 1 >= len(path):
#       break
#     if log == True:
#        print(path[i])
#        print(gpio.orientation_two_points(path[i], path[i+1]))
#     angulo = (gpio.orientation_two_points(path[i], path[i+1]))
#     angulo = angulo + 360 if angulo < 0 else angulo
#     angulo = (angulo - 180) / 360
#     total_orientation += angulo
#   return sum(total_orientation) / len(total_orientation)

def average_orientation(path, start_index, num_points, log=False):
    total_sin = 0
    total_cos = 0
    count = 0

    for i in range(start_index, start_index + num_points):
        if i + 1 >= len(path):
            break
        if log:
            print(path[i])
            print(gpio.orientation_two_points(path[i], path[i+1]))
        
        angle_deg = gpio.orientation_two_points(path[i], path[i+1])
        angle_deg = angle_deg + 360 if angle_deg < 0 else angle_deg
        angle_rad = math.radians(angle_deg)

        total_sin += math.sin(angle_rad)
        total_cos += math.cos(angle_rad)
        count += 1

    if count == 0:
        return None  # O devuelve un valor predeterminado si es m치s adecuado

    average_sin = total_sin / count
    average_cos = total_cos / count

    mean_angle_rad = math.atan2(average_sin, average_cos)
    mean_angle_deg = math.degrees(mean_angle_rad)  # Omitir si prefieres radianes
    return mean_angle_deg

path = [(218, 521), (218, 522), (218, 521), (218, 520), (218, 519), (218, 517), (218, 516), (218, 515), (218, 514), (219, 512), (219, 511), (219, 510), (219, 508), (220, 506), (220, 505), (221, 503), (221, 502), (222, 500), (222, 498), (223, 496), (224, 493), (225, 491), (226, 489), (227, 487), (228, 485), (230, 482), (230, 481), (231, 479), (233, 476), (233, 474), (234, 473), (236, 470), (236, 469), (238, 466), (238, 465), (239, 462), (240, 460), (241, 459), (241, 457), (242, 453), (244, 451), (245, 448), (245, 445), (246, 442), (246, 441), (247, 439), (248, 436), (248, 434), (248, 433), (249, 430), (250, 428), (250, 427), (250, 426), (250, 425), (250, 423), (250, 422), (250, 420), (250, 419), (250, 417), (250, 416), (250, 414), (250, 413), (250, 410), (249, 409), (249, 407), (249, 404), (249, 401), (249, 398), (249, 396), (249, 393), (249, 389), (249, 384), (249, 381), (249, 377), (250, 372), (250, 366), (251, 361), (252, 355), (252, 350), (253, 344), (253, 336), (253, 329), (253, 323), (253, 316), (253, 311), (253, 305), (253, 301), (253, 297), (253, 294), (252, 289), (252, 287), (252, 283), (252, 280), (252, 276), (252, 273), (252, 268), (252, 264), (253, 258), (254, 253), (255, 248), (255, 244), (255, 241), (255, 239), (256, 236), (256, 234), (256, 231), (256, 228), (257, 225), (257, 221), (257, 216), (257, 212), (257, 208), (257, 205), (258, 202), (258, 200), (259, 198), (259, 196), (259, 193), (259, 191), (259, 190), (259, 188), (259, 185), (259, 182), (260, 179), (260, 176), (260, 173), (260, 169), (260, 165), (261, 160), (261, 157), (261, 153), (262, 149), (262, 145), (263, 140), (264, 135), (264, 129), (265, 124), (266, 118), (267, 113), (267, 108), (269, 104), (270, 100), (270, 97), (270, 94), (270, 93), (270, 92), (270, 91), 
(270, 89), (270, 88), (270, 87), (270, 86), (270, 85), (270, 84), (272, 84), (273, 84), (275, 84), (277, 84), (278, 84), (280, 85), (282, 85), (284, 86), (286, 86), (288, 87), (291, 88), (294, 88), (299, 90), (305, 92), 
(311, 94), (317, 96), (324, 97), (331, 99), (336, 101), (342, 103), (349, 104), (352, 106), (355, 106), (358, 107), (360, 107), (363, 109), (365, 110), (368, 110), (371, 112), (376, 113), (381, 114), (387, 115), (393, 116), (398, 117), (402, 117), (405, 117), (408, 117), (411, 117), (413, 117), (415, 118), (419, 119), (425, 120), (430, 121), (436, 123), (444, 124), (454, 126), (462, 127), (471, 128), (479, 128), (488, 129), (494, 129), 
(501, 130), (508, 131), (516, 132), (523, 133), (530, 134), (537, 135), (545, 136), (552, 138), (560, 139), (567, 141), (575, 142), (584, 143), (592, 144), (600, 144), (607, 145), (614, 146), (622, 146), (628, 147), (634, 148), (641, 149), (648, 149), (654, 149), (660, 150), (665, 150), (671, 150), (675, 150), (680, 150), (686, 150), (693, 150), (699, 150), (706, 149), (714, 149), (722, 149), (730, 149), (739, 148), (747, 148), (755, 147), (763, 147), (771, 146), (778, 145), (785, 144), (790, 144), (796, 144), (800, 144), (804, 144), (806, 145), (807, 145), (809, 147), (810, 147), (812, 148), (813, 149), (815, 149), (816, 149), (818, 151), (819, 152), 
(823, 154), (825, 155), (826, 157), (828, 158), (829, 160), (831, 161), (833, 163), (834, 164), (836, 166), (837, 167), (839, 169), (840, 171), (841, 172), (842, 173), (844, 176), (844, 179), (845, 181), (845, 184), (846, 186), (846, 187), (846, 189), (846, 191), (846, 192), (846, 194), (846, 196), (845, 197), (845, 200), (843, 203), (842, 205), (841, 208), (839, 212), (837, 216), (836, 220), (834, 226), (832, 230), (830, 236), (828, 242), (825, 248), (823, 254), (821, 259), (818, 264), (816, 269), (813, 272), (810, 278), (808, 281), (807, 286), (805, 292), (803, 297), (800, 302), (797, 307), (795, 313), (792, 318), (789, 324), (786, 330), (783, 337), 
(780, 343), (778, 349), (775, 355), (774, 361), (772, 366), (770, 372), (768, 378), (766, 384), (764, 388), (762, 394), (760, 399), (758, 406), (756, 411), (753, 418), (750, 424), (747, 430), (744, 436), (742, 442), (739, 448), (736, 454), (734, 460), (732, 465), (729, 471), (727, 477), (725, 482), (723, 486), (722, 489), (720, 494), (718, 497), (717, 501), (715, 504), (713, 507), (712, 509), (710, 512), (708, 515), (706, 517), (704, 520), (702, 524), (701, 526), (699, 527), (698, 529), (696, 531), (695, 532), (693, 534), (692, 535), (691, 538), (689, 539), (688, 540), (686, 542), (685, 543), (683, 545), (682, 545), (682, 546), (681, 547), (680, 548), 
(679, 548), (678, 549), (676, 551), (675, 551), (673, 552), (671, 553), (669, 553), (665, 555), (659, 557), (654, 558), (648, 559), (642, 560), (638, 561), (634, 561), (630, 561), (626, 562), (624, 563), (623, 563), (621, 563), (619, 563), (617, 563), (614, 563), (611, 563), (608, 563), (607, 563), (605, 563), (603, 563), (599, 563), (593, 562), (588, 561), (582, 560), (576, 559), (571, 559), (565, 558), (560, 558), (554, 557), (549, 557), (543, 556), (538, 556), (532, 555), (528, 554), (524, 554), (518, 553), (513, 552), (507, 551), (501, 550), (496, 550), (490, 549), (482, 548), (474, 547), (466, 546), (457, 543), (449, 542), (442, 541), (435, 541), 
(429, 541), (423, 541), (418, 540), (412, 540), (407, 540), (401, 539), (397, 539), (392, 539), (387, 538), (382, 538), (376, 537), (371, 536), (365, 535), (359, 534), (354, 533), (348, 533), (343, 533), (340, 533), (337, 533), (335, 533), (334, 533), (332, 533), (331, 533), (330, 533), (329, 533), (328, 533), (327, 533), (326, 533), (325, 533), (324, 533), (323, 533), (322, 533), (321, 533)]
path_orientation = average_orientation(path, 0, 10)
path_spins = []
for i in range(len(path) - 10):
    actual_path_orientation = average_orientation(path, i, 10)
    error = (path_orientation - actual_path_orientation + 180) % 360 - 180
    if abs(error) > 60:
        print(average_orientation(path, i, 10, True))
        print(f"actual orientation: {actual_path_orientation}")
        print(f"path orientation: {path_orientation}")
        print(error)
        print(path[i+1], "\n------------------------------------\n")
        path_spins.append(path[i+1])
        path_orientation = actual_path_orientation

x_path, y_path = zip(*path)

# Extrae las coordenadas x e y de path_spins en listas separadas
x_spins, y_spins = zip(*path_spins)

# Crea la gr치fica
plt.figure(figsize=(8, 6))
plt.plot(x_path, y_path, 'r-', label='Path')
plt.scatter(x_path, y_path, c='r', label='Path', marker='o')
plt.scatter(x_spins, y_spins, c='g', label='Spins', marker='o')

# Etiqueta los ejes
plt.xlabel('Coordenada X')
plt.ylabel('Coordenada Y')

# A침ade una leyenda
plt.legend()

# Muestra la gr치fica
plt.show()